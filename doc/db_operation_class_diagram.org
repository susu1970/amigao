#+begin_src plantuml :file ./uml_out/db_operation_class_diagram.png
  class DBOperationInterface{
--
    +virtual std::priority_queue<PQueueNode*>search_sentence(std::string)=0;
    +virtual void add_dict_table(std::string dict_name,
				std::map<std::string,std::string>&word_no);
    +virtual void add_dict_table(std::string dict_name,
				std::string dict_file_path);
    +virtual void add_dict_table(std::string dict_name,
				std::vector<std::string>&vec);
    +virtual void add_dict_table(std::string dict_name);
    +virtual void op_website_nice(std::string url,
				 std::string nice)=0;
    +virtual void op_visited_url(std::string url,
				std::string&title,
				std::string&contents,
				std::string&html)=0;
    +virtual void op_reverse_table(std::string url,
				  std::map<std::string,int>&weight)=0;
    +virtual void get_url_no(std::string url)=0;
    +virtual void rm_dict_table(std::string dict_name);
    +virtual bool if_exist(std::string select,
			  std::string from,
			  std::string column,
			  std::string value)=0;
    +virtual void op_dict_manager(std::string dict_name,
				 std::string status,
				 std::string dict_no,
				 std::string comments);
    +virtual void rm_dict_manager(std::string dict_manager_name);
    +virtual ~DBOperationInterface(){}
  }
  class PQueueNode{
    +unsigned long weight
    +std::string address
    +std::string title
    +std::string content
    +std::string html
--
    +PQueueNode(unsigned long weight,std::string address,std::string title,std::string content,std::string html_)
    +bool operator<(PQueueNode&b)
  }
DBOperationInterface o-u-> PQueueNode
#+end_src

#+RESULTS:
[[file:./uml_out/db_operation_class_diagram.png]]
